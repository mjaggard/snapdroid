apply plugin: 'com.android.application'

android {
    signingConfigs {
        config {
            keyAlias 'snapcast'
            keyPassword 'Passw0rdSnapCast'
            storeFile file('../keystore-android')
            storePassword 'SCPassw0rd'
        }
    }
    compileSdkVersion 29

    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def name = versionProps['VERSION_NAME']
        def buildNumber = versionProps['VERSION_NAME']
        name += "." + buildNumber
        def code = versionProps['VERSION_CODE'].toInteger()

        defaultConfig {
            applicationId 'uk.org.jaggard.snapcast'
            versionName name
            versionCode code
            minSdkVersion 16
            targetSdkVersion 29
            multiDexEnabled true
            signingConfig signingConfigs.config
        }
    }
    else {
        throw new RuntimeException("Could not read version.properties!")
    }

    increaseVersionCode()

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    lintOptions {
        disable 'MissingTranslation'
    }
    productFlavors {
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'androidx.appcompat:appcompat:1.0.0'
    compile 'androidx.cardview:cardview:1.0.0'
    compile 'androidx.legacy:legacy-support-v4:1.0.0'
    compile 'androidx.browser:browser:1.0.0'

    //    compile 'com.android.support:recyclerview-v7:23.1.1'
    compile 'com.google.android.material:material:1.0.0'
    compile 'com.google.android.gms:play-services-ads:11.8.0'
}

def increaseVersionCode() {
    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask("assembleRelease")) {
            /* when run release task */
            def versionPropsFile = file('version.properties')

            if (versionPropsFile.canRead()) {
                def Properties versionProps = new Properties()

                versionProps.load(new FileInputStream(versionPropsFile))

                def build = versionProps['VERSION_BUILD'].toInteger() + 1
                def code = versionProps['VERSION_CODE'].toInteger() + 1

                versionProps['VERSION_BUILD'] = build.toString()
                versionProps['VERSION_CODE'] = code.toString()
                versionProps.store(versionPropsFile.newWriter(), null)
            } else {
                throw new RuntimeException("Could not read version.properties!")
            }
        }
    }
}
